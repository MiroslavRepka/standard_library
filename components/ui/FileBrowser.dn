data PrevDir{
	char dir[]
	PrevDir next
	}

data FileItem{
	FileObject object
	FileItem next
	}

data GraphicsItem{
	GraphicsObject object
	GraphicsItem next
	GraphicsItem prev
	}

component provides FileBrowser(ClickListener,AdaptEvents) requires Panel, FileObject, GraphicsListView, io.FileSystem fileSystem, Button, data.StringUtil stringUtil, io.Output out{
	FileItem fileObjects
	FileItem fileObjectsEnd
	FileItem fileObjectsGC
	
	PrevDir history
	
	Button upButton
	Button backButton
	
	GraphicsListView view
	
	Mutex sdLock = new Mutex()
	
	GraphicsItem objects
	GraphicsItem objectsEnd
	
	FileBrowser:FileBrowser()
		{
		upButton = new Button("Up")
		backButton = new Button("Back")
		
		view = new GraphicsListView()
		
		upButton.addClickListener(this)
		backButton.addClickListener(this)		
		}
	
	void AdaptEvents:active()
		{
		FileBrowser()
		setPosition(xPosition, yPosition)
		setSize(width, height)
		setPanel(myPanel)
		setDirectory(currentDirectory)
		}
	
	char[] subString(char array[], int start, int length)
		{
		char result[]
		
		for (int i = 0; i < length; i++)
			result = new char[](result, array[start+i])
		
		return result
		}
	
	char[] normalisePath(char path[])
		{
		int nxt = 0
		while ((nxt = stringUtil.find(path, "\\")) != StringUtil.NOT_FOUND)
			{
			path = new char[](subString(path, 0, nxt), "/", subString(path, nxt+1, path.arrayLength - (nxt+1)))
			}
		return path
		}
	
	void FileBrowser:setDirectory(char dir[])
		{
		dir = normalisePath(clone dir)
		
		mutex(sdLock)
			{
			currentDirectory = dir
			
			//clear the GLV and add the files of this directory
			view.clear()
			
			//delete the file objects one step behind each click (otherwise we may delete objects through which control is flowing)
			fileObjectsGC = fileObjects
			fileObjects = null
			
			FileEntry files[] = fileSystem.getDirectoryContents(currentDirectory)
			
			//directories first
			for (int i = 0; i < files.arrayLength; i++)
				{
				FileInfo info = fileSystem.getInfo(new char[](currentDirectory, files[i].name))
				
				if (info.type == FileInfo.TYPE_DIR)
					{
					FileItem nfi = new FileItem()
					
					nfi.object = new FileObject(new char[](currentDirectory, files[i].name, "/"))
					nfi.object.addClickListener(this)
					view.addObject(nfi.object)
					
					if (fileObjects == null)
						fileObjects = nfi
						else
						fileObjectsEnd.next = nfi
					
					fileObjectsEnd = nfi
					}
				}
			
			//and files
			for (int i = 0; i < files.arrayLength; i++)
				{
				FileInfo info = fileSystem.getInfo(new char[](currentDirectory, files[i].name))
				
				if (info.type == FileInfo.TYPE_FILE)
					{
					FileItem nfi = new FileItem()
					
					nfi.object = new FileObject(new char[](currentDirectory, files[i].name))
					view.addObject(nfi.object)
					
					if (fileObjects == null)
						fileObjects = nfi
						else
						fileObjectsEnd.next = nfi
					
					fileObjectsEnd = nfi
					}
				}
			}
		}
	
	char[] FileBrowser:getDirectory()
		{
		return currentDirectory
		}
	
	void ClickListener:click(Object o)
		{
		if (o === upButton)
			{
			//if there is more than one "/" on the path, remove the last one
			String parts[] = stringUtil.explode(currentDirectory, "/")
			if (parts.arrayLength > 1)
				{
				String xparts[] = new String[parts.arrayLength - 1]
				xparts =[] parts
				
				char nxt[] = new char[](stringUtil.implode(xparts, "/"), "/")
				
				if (currentDirectory != "")
					{
					PrevDir npd = new PrevDir(currentDirectory)
					npd.next = history
					history = npd
					}
				
				setDirectory(nxt)
				}
			}
			else if (o === backButton)
			{
			if (history != null)
				{
				PrevDir gt = history
				history = history.next
				
				setDirectory(gt.dir)
				}
			}
			else
			{
			FileObject fo = o
			char path[] = fo.getFile()
			
			FileInfo info = fileSystem.getInfo(path)
			
			if (info.type == FileInfo.TYPE_DIR)
				{
				if (currentDirectory != "")
					{
					PrevDir npd = new PrevDir(currentDirectory)
					npd.next = history
					history = npd
					}
				
				setDirectory(path)
				}
			}
		}
	
	void FileBrowser:paint(Canvas c)
		{
		for (GraphicsItem gi = objects; gi != null; gi = gi.next)
			{
			gi.object.paint(c)
			}
		}
	
	void FileBrowser:setPanel(Panel p)
		{
		myPanel = p
		
		addObject(view)
		
		addObject(upButton)
		addObject(backButton)
		
		myPanel.addClickTarget(this)
		}
	
	Panel FileBrowser:getPanel()
		{
		return myPanel
		}
	
	WH FileBrowser:getPreferredSize()
		{
		return new WH(width, height)
		}
	
	Point FileBrowser:getPosition()
		{
		return new Point(xPosition, yPosition)
		}
	
	void FileBrowser:setPosition(int x, int y)
		{
		xPosition = x
		yPosition = y
		
		view.setPosition(x, y+25)
		
		upButton.setPosition(xPosition, yPosition)
		backButton.setPosition(xPosition+50, yPosition)
		}
	
	void FileBrowser:setSize(int newWidth, int newHeight)
		{
		width = newWidth
		height = newHeight
		
		view.setSize(newWidth, newHeight - 25)
		}
	
	WH FileBrowser:getSize()
		{
		return new WH(width, height)
		}
	
	Rect FileBrowser:getBounds()
		{
		return new Rect(xPosition, yPosition, width, height)
		}
	
	void FileBrowser:addClickListener(ClickListener cl)
		{
		
		}
	
	void FileBrowser:remClickListener(ClickListener cl)
		{
		
		}
	
	ClickListenerItem[] FileBrowser:getClickListeners()
		{
		return null
		}
	
	void FileBrowser:setBackground(Color c)
		{
		}
	
	Color FileBrowser:getBackground()
		{
		return null
		}
	
	void FileBrowser:repaint()
		{
		myPanel.repaint()
		}
	
	void FileBrowser:addObject(GraphicsObject go)
		{
		GraphicsItem newItem = new GraphicsItem(go)
		
		if (objects == null)
			objects = newItem
			else
			objectsEnd.next = newItem
		
		newItem.prev = objectsEnd
		objectsEnd = newItem
		
		go.setPanel(this)
		myPanel.repaint()
		}
	
	void FileBrowser:remObject(GraphicsObject go)
		{
		
		}
	
	GraphicsObjectItem[] FileBrowser:getObjects()
		{
		return objects
		}
	}