component provides App requires io.Output out, net.TLSContext, net.TLS, net.TCPSocket, net.TCPServerSocket, io.File {
	
	int App:main(AppParam params[])
		{
		char certificate[]
		byte privateKey[]
		
		File fd = new File("cert.pem", File.READ)
		certificate = fd.read(fd.getSize())
		fd.close()
		
		fd = new File("key.pem", File.READ)
		privateKey = fd.read(fd.getSize())
		fd.close()
		
		TLSContext ctx = new TLSContext(TLSContext.SERVER)
		
		ctx.setCertificate(certificate, privateKey)
		
		TCPServerSocket server = new TCPServerSocket()
		server.bind(TCPServerSocket.ANY_ADDRESS, 4033)
		
		TCPSocket client = new TCPSocket()
		
		client.accept(server)
		
		TLS ssl = new TLS(ctx)
		
		ssl.accept(client)
		
		//recv/send data
		char command[]
		char buf[]
		int len
		
		while ((buf = ssl.recv(1)).arrayLength > 0 && buf != "\r" && buf != "\n")
			{
			command = new char[](command, buf)
			}
		
		if (buf != "\r" && buf != "\n")
			{
			out.println("Error: Client disconnected prematurely ($command)")
			}
		
		char result[] = "Hi!"
		
		ssl.send("HTTP/1.0 200 OK\r\n")
		ssl.send("Content-Length: $(result.arrayLength)\r\n")
		ssl.send("Content-Encoding: binary\r\n")
		ssl.send("Connection: close\r\n")
		ssl.send("\r\n")
		
		ssl.send(result)
		
		ssl.close()
		
		client.disconnect()
		server.unbind()
		
		return 99
		}
	
	}