component provides App requires ui.IOLayer coreui, ui.Window, ui.Button, ui.FileBrowser, io.Output out{
	
	Window window
	
	eventsink Events(EventData ed)
		{
		if (ed.source === coreui && ed.type == IOLayer.[ready])
			{
			startApp()
			}
			else if (ed.source === window)
			{
			window.close()
			coreui.shutdown()
			}
		}
	
	void startApp()
		{
		window = new Window("My file browser")
		window.setSize(400, 400)
		window.setVisible(true)
		
		FileBrowser browser = new FileBrowser()
		
		browser.setPosition(5, 30)
		browser.setSize(385, 340)
		
		window.addObject(browser)
		browser.setDirectory("c:/")
		
		sinkevent Events(window)
		}
	
	int App:main(AppParam params[])
		{
		//initialise the system-level UI framework
		coreui.init()

		//listen for startup events from the system
		sinkevent Events(coreui)

		//run the core system loop, which blocks until the last window is closed
		coreui.run()
		
		return 0
		}
	
	}