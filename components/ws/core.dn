/*
This is a very simple web framework. Run ws.core in your web app directory.

URLs for your website are mapped as follows:

Anything on SWC_PATH is directly served as static web content.

For any other URL (such as /my/resource) the URL is treated as a dotted file path and we search for a file with a corresponding name (starting at my.resource.o). If no such file exists, the URL is shortened by one level and we search for a file at this level (i.e., at my.o), continuing this search until we default to "/web.o".

When the located web component is invoked, we pass into its "path" parameter any part of the URL that was removed. Using the example URL "/my/resource", if we locate the file "my.o" we pass in the path "resource"; if we default to "/web.o" the path is "my/resource".

Invocations on web components are serialised, so no concurrency control is necessary to gain mutual exclusion.
*/

const char SWC_PATH[] = "/swc/"
const int LISTEN_PORT = 8080

data Command {
	const int GET = 1
	const int POST = 2
	const int PUT = 3
	const int DELETE = 4
	int type
	
	char resource[]
	Header headers[]
	}

data PathMapping {
	char path[]
	char file[]
	}

component provides App requires io.Output out, net.TCPServerSocket, net.TCPSocket, data.StringUtil stringUtil, data.IntUtil intUtil, io.FileSystem fileSystem, io.File, ws.DocStream, Web page {
	
	char web_root[] = "./"
	
	Command readCommand(TCPSocket socket)
		{
		Command cmd = new Command()
		
		Header headers[]
		
		char buf[]
		char last4[] = new char[4]
		
		while (last4 != "\r\n\r\n")
			{
			char b[] = socket.recv(1)
			
			if (b == null)
				return null
			
			buf = new char[](buf, b)
			last4[0] = last4[1]
			last4[1] = last4[2]
			last4[2] = last4[3]
			last4[3] = b[0]
			}
		
		String lines[] = stringUtil.explode(buf, "\r\n")
		
		String cmd_parts[] = stringUtil.explode(lines[0].string, " ")
		
		if (stringUtil.lowercase(cmd_parts[0].string) == "get")
			cmd.type = Command.GET
			else if (stringUtil.lowercase(cmd_parts[0].string) == "post")
			cmd.type = Command.POST
		
		cmd.resource = cmd_parts[1].string
		
		for (int i = 1; i < lines.arrayLength; i++)
			{
			int ndx = stringUtil.find(lines[i].string, ":") + 1
			char key[] = stringUtil.subString(lines[i].string, 0, ndx - 1)
			char value[] = stringUtil.trim(stringUtil.subString(lines[i].string, ndx, lines[i].string.arrayLength - ndx))
			
			headers = new Header[](headers, new Header(stringUtil.lowercase(key), value))
			}
		
		cmd.headers = headers
		
		return cmd
		}
	
	char[] getHeaderValue(Command cmd, char key[])
		{
		key = stringUtil.lowercase(key)
		
		for (int i = 0; i < cmd.headers.arrayLength; i++)
			{
			if (stringUtil.lowercase(cmd.headers[i].key) == key)
				{
				return cmd.headers[i].value
				}
			}
		
		return null
		}
	
	bool serveFunction_GET(DocStream ds, char command[])
		{
		Web rh = new Web()
		
		return rh.get(command, ds)
		}
	
	bool serveFunction_POST(DocStream ds, char command[], char ctype[], byte payload[])
		{
		Web rh = new Web()
		
		return rh.post(command, ctype, payload, ds)
		}
	
	bool serveFile(char command[], TCPSocket s)
		{
		char path[] = new char[](web_root, command)
		
		if (fileSystem.exists(path))
			{
			File fd = new File(path, File.READ)
			
			byte dat[] = fd.read(fd.getSize())
			
			s.send("HTTP/1.1 200 OK\r\n")
			s.send("Server: Dana Web Engine\r\n")
			s.send("Connection: close\r\n")
			s.send("Content-length: $(fd.getSize())\r\n")
			s.send("\r\n")
			
			fd.close()
			
			s.send(dat)
			
			return true
			}
		
		return false
		}
	
	bool staticFile(char command[])
		{
		if (command.arrayLength >= SWC_PATH.arrayLength && stringUtil.subString(command, 0, SWC_PATH.arrayLength) == SWC_PATH)
			{
			return true
			}
		
		return false
		}
	
	void processStream(TCPSocket s)
		{
		//parse headers, extract command
		
		//call function associated with command, return result (as HTTP response)
		
		Command cmd = readCommand(s)
		
		if (cmd == null)
			{
			//malformed / interrupted request
			s.disconnect()
			return
			}
		
		String resource = new String(cmd.resource)
		
		bool success = false
		
		if (staticFile(cmd.resource))
			{
			success = serveFile(cmd.resource, s)
			}
			else
			{
			DocStream ds = new DocStream(s, cmd.headers, false)
			
			if (cmd.type == Command.GET)
				{
				success = serveFunction_GET(ds, resource.string)
				}
				else if (cmd.type == Command.POST)
				{
				//read the payload first
				char ctype[] = getHeaderValue(cmd, "content-type")
				int plen = intUtil.intFromString(getHeaderValue(cmd, "content-length"))
				byte payload[] = s.recv(plen)
				
				success = serveFunction_POST(ds, resource.string, ctype, payload)
				}
			
			if (success) ds.endStream()
			}
		
		if (!success)
			{
			s.send("HTTP/1.1 404 Resource Not Found\r\n")
			s.send("Server: Dana Web Engine\r\n")
			s.send("Connection: close\r\n")
			s.send("Content-length: 0\r\n")
			s.send("\r\n")
			}
		
		s.disconnect()
		}
	
	int App:main(AppParam params[])
		{
		TCPServerSocket s = new TCPServerSocket()
		
		if (!s.bind(TCPServerSocket.ANY_ADDRESS, LISTEN_PORT))
			throw new Exception("Failed to bind master socket")
		
		while (true)
			{
			TCPSocket cs = new TCPSocket()
			
			if (cs.accept(s))
				{
				processStream(cs)
				}
			}
		
		return 0
		}
	
	}