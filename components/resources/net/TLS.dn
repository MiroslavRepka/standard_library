uses TLSContext
uses TLSCertStore
uses TCPSocket
uses data.String

data VerifyStatus {
	const int OK = 0
	const int FAIL = 1
	int status
	
	char failedCertificate[]
	char failedReason[]
	}

/* {"description" : "This API supports transport layer security (TLS), historically known as a 'secure socket layer'. There are two parts of making secure connections: authentication and encryption. This API creates an encrypted channel by using X509 certificates as public keys to initiate a session key exchange. It also performs part of authentication, by verifying that a certificate is trusted. The other core part of authentication is host name verification, which checks that the server you are talking to actually matches that which the certificate has been issued for; host name verification is left to the programmer to do separately as it can be protocol-specific."} */

interface TLS {
	
	/* {"@description" : "Instantiate a new secure session object, using the configuration in the given TLSContext object."} */
	TLS(TLSContext context)
	
	/* {"@description" : "This function is used by servers to accept new client connections."} */
	bool accept(TCPSocket socket)
	
	/* {"@description" : "This function allows you to connect to a remote host using a TLS handshake, creating an encrypted channel. It *does not* verify that the remote host has an authentic TLS (X509) certificate and is therefore trustworthy. You must do this verification after connect() by using verifyCertificate() and then, based on the result, decide on whether or not you wish to send any data. Note that you should *also* perform host name verification yourself before sending any data."} */
	bool connect(TCPSocket socket)
	
	/* {"@description" : "Get the certificate of the remote host, which can be queried or used in verifyCertificate(). The certificate is returned in base64-encoded PEM format."} */
	char[] getPeerCertificate()
	
	/* {"@description" : "Get the certificate chain of the remote host, which can be queried or used in verifyCertificate(). The certificate chain is returned as an array base64-encoded PEM format certificates."} */
	String[] getPeerCertChain()
	
	/* {"@description" : "This function allows you to verify a certificate, as returned by getPeerCertificate() or getPeerCertChain(). An SSLCertStore instance must be passed in which holds root certificates that you intend to trust. It is still your responsibility to perform host name verification separately."} */
	VerifyStatus verifyCertificate(TLSCertStore storeData, char certificate[], String chain[])
	
	/* {"@description" : "Write data to the channel, to be sent to the remote host."} */
	int write(byte content[])
	
	/* {"@description" : "Read an amount of data from the channel; this function blocks until the given number of bytes have been read or the connection is closed."} */
	byte[] read(int len)
	
	/* {"@description" : "Close the secure session."} */
	void close()
	
	}